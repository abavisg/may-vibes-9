import type { Course, LearningCard } from "@/types";

// Function to format date in a readable way
function formatDate(date: Date): string {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

// Function to create a simple HTML template for the PDF
function generateHtmlTemplate(course: Course): string {
  // Check if cards are available and correctly structured
  const cards = Array.isArray(course.cards) ? course.cards : [];

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>${course.topic} - Learning Cards</title>
      <style>
        body {
          font-family: 'Helvetica', 'Arial', sans-serif;
          line-height: 1.6;
          color: #333;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          text-align: center;
          margin-bottom: 30px;
          padding-bottom: 20px;
          border-bottom: 1px solid #eee;
        }
        .header h1 {
          color: #2563eb;
          margin-bottom: 5px;
        }
        .header .meta {
          color: #666;
          font-size: 0.9em;
        }
        .card {
          margin-bottom: 40px;
          padding: 20px;
          border: 1px solid #ddd;
          border-radius: 8px;
          background-color: #f9f9f9;
          break-inside: avoid;
        }
        .card h2 {
          color: #2563eb;
          margin-top: 0;
          padding-bottom: 10px;
          border-bottom: 1px solid #eee;
        }
        .fun-fact {
          margin-top: 20px;
          padding: 15px;
          background-color: #fff3cd;
          border-left: 4px solid #ffc107;
          font-style: italic;
        }
        .fun-fact h3 {
          margin-top: 0;
          color: #856404;
        }
        .footer {
          margin-top: 40px;
          padding-top: 20px;
          border-top: 1px solid #eee;
          text-align: center;
          font-size: 0.8em;
          color: #666;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>${course.topic}</h1>
        <div class="meta">
          <p>Age Group: ${course.ageGroup} years | Course Type: ${course.courseLength}</p>
          <p>Generated on: ${formatDate(new Date(course.createdAt))}</p>
        </div>
      </div>
      
      <div class="content">
        ${cards.map((card: LearningCard, index: number) => `
          <div class="card">
            <h2>${index + 1}. ${card.title}</h2>
            <div class="card-content">
              ${card.content}
            </div>
            <div class="fun-fact">
              <h3>Fun Fact!</h3>
              <p>${card.funFact}</p>
            </div>
          </div>
        `).join('')}
      </div>
      
      <div class="footer">
        <p>Generated by KidLearn Educational Platform</p>
      </div>
    </body>
    </html>
  `;
}

// Function to trigger downloading the HTML as a PDF
export function downloadCourseAsPdf(course: Course): void {
  // Create a simple HTML template for the PDF
  const htmlContent = generateHtmlTemplate(course);
  
  // Since we don't have full PDF generation on the client side,
  // we'll just download the HTML file that the user can print as PDF
  const blob = new Blob([htmlContent], { type: 'text/html' });
  const url = URL.createObjectURL(blob);
  
  // Create a temporary link and click it to download
  const a = document.createElement('a');
  a.href = url;
  a.download = `${course.topic.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_learning_cards.html`;
  document.body.appendChild(a);
  a.click();
  
  // Clean up
  setTimeout(() => {
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }, 100);
}

// Function to prepare course data for printing
export function printCourse(course: Course): void {
  // Create a new window
  const printWindow = window.open('', '_blank');
  
  if (!printWindow) {
    alert('Please allow pop-ups to print this course.');
    return;
  }
  
  // Write the HTML content to the new window
  printWindow.document.write(generateHtmlTemplate(course));
  printWindow.document.close();
  
  // Wait for resources to load
  printWindow.addEventListener('load', () => {
    printWindow.print();
    // Many browsers will close the window after printing
  });
}